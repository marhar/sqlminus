import cx_Oracle

class Tinysample:
    """
    class Tinysample -- interface for package APIDEMO_ADM.TINYSAMPLE

    *** This is a generated class. DO NOT MODIFY! ***
    """

    #------------------------------------------------------
    def __init__(self,curs):
        self.curs=curs
        # do not set autocommit if your are not
        # writing an appserver!
        self.autocommit=False

    #------------------------------------------------------
    def f0(self):
        """
        this is a function
        """

        rv=self.curs.callfunc('TINYSAMPLE.F0',cx_Oracle.NUMBER)
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def f1(self,x):
        """
        this is a function
        x : some number
        """

        rv=self.curs.callfunc('TINYSAMPLE.F1',cx_Oracle.NUMBER,[x])
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def p0(self):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """

        result = self.curs.callproc('TINYSAMPLE.P0')
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p0_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}

            arguments.append(dict)
        result = self.curs.executemany("begin TINYSAMPLE.P0(); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1(self,x):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """

        result = self.curs.callproc('TINYSAMPLE.P1',[x])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=parmlist[i][0]

            arguments.append(dict)
        result = self.curs.executemany("begin TINYSAMPLE.P1(:1); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result


