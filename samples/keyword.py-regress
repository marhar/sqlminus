import cx_Oracle

class Keyword:
    """
    class Keyword -- interface for package APIDEMO_ADM.KEYWORD

    *** This is a generated class. DO NOT MODIFY! ***

    package keyword -- process asset keywords

    This package associates keywords with asset ids.  An asset
    may have zero or more keywords.  It is not an error
    to re-add a keyword that already exists, this condition
    will be handled gracefully by the insertion code.[*]

    Note: keywords can currently be stored with embedded spaces.
    Is this a good idea?  If not, we will add a check for this
    in future versions of this interface, and enforce via a
    table constraint.  If it is a good idea, we will have
    the searching functions search in a manner that treats all
    whitespace sequences to be identical.

    [*] this is not the case if you are directly
        performing an insert on the table.
    """

    #------------------------------------------------------
    def __init__(self,curs):
        self.curs=curs
        # do not set autocommit if your are not
        # writing an appserver!
        self.autocommit=False

    #------------------------------------------------------
    def add(self,aid,akeyword):
        """
        add a keyword to an asset
        aid       : asset identifier
        akeyword  : keyword to add
        """
        result = self.curs.callproc('KEYWORD.ADD',[aid,akeyword])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def add_V(self,parmlist):
        """
        add a keyword to an asset
        aid       : asset identifier
        akeyword  : keyword to add
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        result = self.curs.executemany("begin KEYWORD.ADD(:1, :2); end;", parmlist)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def all_words(self):
        """
        list all the keywords defined for the assets
        returns: ref cursor to iterate over all keywords
        """
        rv=self.curs.callfunc('KEYWORD.ALL_WORDS',cx_Oracle.CURSOR)
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def all_words_L(self):
        """
        list all the keywords defined for the assets
        returns: ref cursor to iterate over all keywords
        (autogenerated list-consing _L version)
        """
        mycurs=self.curs.callfunc('KEYWORD.ALL_WORDS',cx_Oracle.CURSOR)
        if self.autocommit:
            conn.commit()
        rv=[r for r in mycurs]
        return rv

    #------------------------------------------------------
    def delet(self,aid,akeyword):
        """
        delete a keyword from an asset
        aid      : asset identifier
        akeyword : keyword to delete
        """
        result = self.curs.callproc('KEYWORD.DELET',[aid,akeyword])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def delet_V(self,parmlist):
        """
        delete a keyword from an asset
        aid      : asset identifier
        akeyword : keyword to delete
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        result = self.curs.executemany("begin KEYWORD.DELET(:1, :2); end;", parmlist)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def get_ids(self,aref,akeyword):
        """
        find all assets with a given keyword
        aref     : reference cursor for results
        akeyword : specified keyword
        """
        result = self.curs.callproc('KEYWORD.GET_IDS',[aref,akeyword])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def get_ids_V(self,parmlist):
        """
        find all assets with a given keyword
        aref     : reference cursor for results
        akeyword : specified keyword
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        result = self.curs.executemany("begin KEYWORD.GET_IDS(:1, :2); end;", parmlist)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def get_keywords(self,aref,aid):
        """
        find all assets with a given keyword
        aref     : reference cursor for results
        akeyword : specified keyword
        """
        result = self.curs.callproc('KEYWORD.GET_KEYWORDS',[aref,aid])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def get_keywords_V(self,parmlist):
        """
        find all assets with a given keyword
        aref     : reference cursor for results
        akeyword : specified keyword
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        result = self.curs.executemany("begin KEYWORD.GET_KEYWORDS(:1, :2); end;", parmlist)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def get_keywords2(self,aid):
        """
        find all assets with a given keyword
        aref     : reference cursor for results
        akeyword : specified keyword
        returns: iterator over all keywords
        """
        rv=self.curs.callfunc('KEYWORD.GET_KEYWORDS2',cx_Oracle.CURSOR,[aid])
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def get_keywords2_L(self,aid):
        """
        find all assets with a given keyword
        aref     : reference cursor for results
        akeyword : specified keyword
        returns: iterator over all keywords
        (autogenerated list-consing _L version)
        """
        mycurs=self.curs.callfunc('KEYWORD.GET_KEYWORDS2',cx_Oracle.CURSOR,[aid])
        if self.autocommit:
            conn.commit()
        rv=[r for r in mycurs]
        return rv


