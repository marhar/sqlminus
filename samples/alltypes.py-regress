import cx_Oracle

class Alltypes:
    """
    class Alltypes -- interface for package APIDEMO_ADM.ALLTYPES

    *** This is a generated class. DO NOT MODIFY! ***
    """

    #------------------------------------------------------
    def __init__(self,curs):
        self.curs=curs
        # do not set autocommit if your are not
        # writing an appserver!
        self.autocommit=False

    #------------------------------------------------------
    def f_date(self,x_date_in,x_date_out,x_date_inout):
        """
        f_date -- test the type date
        parameters:
          x_date_in : in parameter of type date
          x_date_out : out parameter of type date
          x_date_inout : inout parameter of type date
        returns:
          a value of type date
        """

        rv=self.curs.callfunc('ALLTYPES.F_DATE',cx_Oracle.DATETIME,[x_date_in,x_date_out,x_date_inout])
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def f_float(self,x_float_in,x_float_out,x_float_inout):
        """
        f_float -- test the type float
        parameters:
          x_float_in : in parameter of type float
          x_float_out : out parameter of type float
          x_float_inout : inout parameter of type float
        returns:
          a value of type float
        """

        rv=self.curs.callfunc('ALLTYPES.F_FLOAT',cx_Oracle.NUMBER,[x_float_in,x_float_out,x_float_inout])
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def f_noparms(self):
        """
        f_noparms -- test a function with no parameters
        parameters:
          none
        """

        rv=self.curs.callfunc('ALLTYPES.F_NOPARMS',cx_Oracle.NUMBER)
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def f_number(self,x_number_in,x_number_out,x_number_inout):
        """
        f_number -- test the type number
        parameters:
          x_number_in : in parameter of type number
          x_number_out : out parameter of type number
          x_number_inout : inout parameter of type number
        returns:
          a value of type number
        """

        rv=self.curs.callfunc('ALLTYPES.F_NUMBER',cx_Oracle.NUMBER,[x_number_in,x_number_out,x_number_inout])
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def f_timestamp(self,x_timestamp_in,x_timestamp_out,x_timestamp_inout):
        """
        f_timestamp -- test the type timestamp
        parameters:
          x_timestamp_in : in parameter of type timestamp
          x_timestamp_out : out parameter of type timestamp
          x_timestamp_inout : inout parameter of type timestamp
        returns:
          a value of type timestamp
        """

        rv=self.curs.callfunc('ALLTYPES.F_TIMESTAMP',cx_Oracle.TIMESTAMP,[x_timestamp_in,x_timestamp_out,x_timestamp_inout])
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def f_varchar2(self,x_varchar2_in,x_varchar2_out,x_varchar2_inout):
        """
        f_varchar2 -- test the type varchar2
        parameters:
          x_varchar2_in : in parameter of type varchar2
          x_varchar2_out : out parameter of type varchar2
          x_varchar2_inout : inout parameter of type varchar2
        returns:
          a value of type varchar2
        """

        rv=self.curs.callfunc('ALLTYPES.F_VARCHAR2',cx_Oracle.STRING,[x_varchar2_in,x_varchar2_out,x_varchar2_inout])
        if self.autocommit:
            conn.commit()
        return rv

    #------------------------------------------------------
    def p1_datetbl(self,x_datetbl_in):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """
        x_datetbl_in=self.curs.arrayvar(cx_Oracle.DATETIME, x_datetbl_in)

        result = self.curs.callproc('ALLTYPES.P1_DATETBL',[x_datetbl_in])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_datetbl_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=self.curs.arrayvar(cx_Oracle.DATETIME, parmlist[i][0])

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P1_DATETBL(:1); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_floattbl(self,x_floattbl_in):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """
        x_floattbl_in=self.curs.arrayvar(cx_Oracle.NUMBER, x_floattbl_in)

        result = self.curs.callproc('ALLTYPES.P1_FLOATTBL',[x_floattbl_in])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_floattbl_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=self.curs.arrayvar(cx_Oracle.NUMBER, parmlist[i][0])

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P1_FLOATTBL(:1); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_numbertbl(self,x_numbertbl_in):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """
        x_numbertbl_in=self.curs.arrayvar(cx_Oracle.NUMBER, x_numbertbl_in)

        result = self.curs.callproc('ALLTYPES.P1_NUMBERTBL',[x_numbertbl_in])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_numbertbl_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=self.curs.arrayvar(cx_Oracle.NUMBER, parmlist[i][0])

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P1_NUMBERTBL(:1); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_timestamptbl(self,x_timestamptbl_in):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """
        x_timestamptbl_in=self.curs.arrayvar(cx_Oracle.TIMESTAMP, x_timestamptbl_in)

        result = self.curs.callproc('ALLTYPES.P1_TIMESTAMPTBL',[x_timestamptbl_in])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_timestamptbl_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=self.curs.arrayvar(cx_Oracle.TIMESTAMP, parmlist[i][0])

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P1_TIMESTAMPTBL(:1); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_varchar2tbl(self,x_varchar2tbl_in):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """
        x_varchar2tbl_in=self.curs.arrayvar(cx_Oracle.STRING, x_varchar2tbl_in)

        result = self.curs.callproc('ALLTYPES.P1_VARCHAR2TBL',[x_varchar2tbl_in])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p1_varchar2tbl_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=self.curs.arrayvar(cx_Oracle.STRING, parmlist[i][0])

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P1_VARCHAR2TBL(:1); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_date(self,x_date_in,x_date_out,x_date_inout):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """

        result = self.curs.callproc('ALLTYPES.P3_DATE',[x_date_in,x_date_out,x_date_inout])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_date_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=parmlist[i][0]
            dict['2']=parmlist[i][1]
            dict['3']=parmlist[i][2]

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P3_DATE(:1, :2, :3); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_float(self,x_float_in,x_float_out,x_float_inout):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """

        result = self.curs.callproc('ALLTYPES.P3_FLOAT',[x_float_in,x_float_out,x_float_inout])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_float_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=parmlist[i][0]
            dict['2']=parmlist[i][1]
            dict['3']=parmlist[i][2]

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P3_FLOAT(:1, :2, :3); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_number(self,x_number_in,x_number_out,x_number_inout):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """

        result = self.curs.callproc('ALLTYPES.P3_NUMBER',[x_number_in,x_number_out,x_number_inout])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_number_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=parmlist[i][0]
            dict['2']=parmlist[i][1]
            dict['3']=parmlist[i][2]

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P3_NUMBER(:1, :2, :3); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_timestamp(self,x_timestamp_in,x_timestamp_out,x_timestamp_inout):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """

        result = self.curs.callproc('ALLTYPES.P3_TIMESTAMP',[x_timestamp_in,x_timestamp_out,x_timestamp_inout])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_timestamp_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=parmlist[i][0]
            dict['2']=parmlist[i][1]
            dict['3']=parmlist[i][2]

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P3_TIMESTAMP(:1, :2, :3); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_varchar2(self,x_varchar2_in,x_varchar2_out,x_varchar2_inout):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """

        result = self.curs.callproc('ALLTYPES.P3_VARCHAR2',[x_varchar2_in,x_varchar2_out,x_varchar2_inout])
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p3_varchar2_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}
            dict['1']=parmlist[i][0]
            dict['2']=parmlist[i][1]
            dict['3']=parmlist[i][2]

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P3_VARCHAR2(:1, :2, :3); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p_noparms(self):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        """

        result = self.curs.callproc('ALLTYPES.P_NOPARMS')
        if self.autocommit:
            conn.commit()
        return result

    #------------------------------------------------------
    def p_noparms_v(self,parmlist):
        """
        (No doc string for this procedure)
        (orapig --help for more info )
        (this is the autogenerated vectorized _V procedure)
        (dont use it if you have out parms)
        """
        arguments = []
        for i in range(len(parmlist)):
            dict = {}

            arguments.append(dict)
        result = self.curs.executemany("begin ALLTYPES.P_NOPARMS(); end;", arguments)
        if self.autocommit:
            conn.commit()
        return result


